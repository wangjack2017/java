package jus;
import javax.sound.midi.*;
/**
 * 如何使用静态的makeEvent()方法
 * @author 王思伟
 *
 */
public class demo19 implements ControllerEventListener {
    public static void main(String [] args) {
        demo19 demo=new demo19();
        demo.go();
        
    }
    public void go() {
        try {
            //创建并打开队列
            Sequencer sequencer=MidiSystem.getSequencer();
            sequencer.open();
            //向seqencer注册事件，注册的方法是取用监听则与代表想要监听的事件                                的int数组，我们只需要127事件
            int [] eventsIWant= {127};
            sequencer.addControllerEventListener(this, eventsIWant);
        
            //创建队列并track
            Sequence seq=new Sequence(Sequence.PPQ,4);
            Track track=seq.createTrack();
            for(int i=5;i<61;i+=4) {
                //调用makeEvent来产生信息和事件然后把他们加到track上
                track.add(makeEvent(144,1,i,100,i));
                //插入编号为127的自定义controllerevent（176），不做任何事情
                track.add(makeEvent(177,1,127,0,i));
                track.add(makeEvent(128,1,i,100,i+2));
            }
            //开始播放
            sequencer.setSequence(seq);
            sequencer.setTempoInBPM(220);
            sequencer.start();    
        }catch(Exception e) {
            e.printStackTrace();
            
        }
    }
        
    public static  MidiEvent makeEvent(int comd,int chan,int one,int two,int tick) {
        MidiEvent event=null;
        try {
            ShortMessage a=new ShortMessage();
            a.setMessage(comd,chan,one,two);
            event=new MidiEvent(a,tick);
            
        }catch(Exception e) {
            e.printStackTrace();
        }
        return event;
        
    }
    @Override
    public void controlChange(ShortMessage event) {
        System.out.println("王思伟真棒！！！");
        
    }
}
