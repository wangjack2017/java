package xiancheng;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * 实现多线程的第三种方法，可以抛异常
 * 用Callable接口来实现
 * @author 王思伟
 *
 */
public class programe {
 public static void main(String [] args) throws InterruptedException, ExecutionException {
  //创建线程
  ExecutorService ser=Executors.newFixedThreadPool(2);//任务调度
  tortoise t=new tortoise("老乌龟",1000);
  tortoise r=new tortoise("大白兔",500);
  //获取值
  Future<Integer> result=ser.submit(t);
  Future<Integer> result1=ser.submit(r);
  Thread.sleep(2000);
  t.setFlag(false);//停止线程循环体
  r.setFlag(false);
  //返回值
  int num=result.get();
  int num1=result1.get();
  System.out.println(num);
  System.out.println(num1);
  ser.shutdown();
  
 }
	
}
class tortoise implements Callable<Integer>{
 private String name;
 private boolean flag=true;
 private int time;
 private int step=0;
 public tortoise() {
  
 }
 public tortoise(String name,int time) {
  this.name=name;
  this.time=time;
 }
 public String getName() {
  return name;
 }
 public boolean isFlag() {
  return flag;
 }
 public void setFlag(boolean flag) {
  this.flag = flag;
 }
 public void setName(String name) {
  this.name = name;
 }

 @Override
 public Integer call() throws Exception {
  // TODO Auto-generated method stub
 while(flag){
  Thread.sleep(time);
  step++; 
  }
  return step;
 }
}

